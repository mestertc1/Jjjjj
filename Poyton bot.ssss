import telegram
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler
import sqlite3
from datetime import datetime
import schedule
import time
import threading

# مراحل مکالمه
ADD_PRODUCT, GET_USER_INFO, EDIT_USER_INFO = range(3)

# دیتابیس
conn = sqlite3.connect('bot_database.db', check_same_thread=False)
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS products 
             (id INTEGER PRIMARY KEY, name TEXT, description TEXT, image TEXT)''')
c.execute('''CREATE TABLE IF NOT EXISTS users 
             (id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, phone TEXT, birth_date TEXT)''')
c.execute('''CREATE TABLE IF NOT EXISTS stats 
             (date TEXT, visits INTEGER)''')
conn.commit()

# تنظیمات اولیه
CHANNELS = ['https://t.me/LuxZ3', 'https://t.me/poshakfrigg02']  # نام کانال‌ها را اینجا وارد کنید
ADMIN_ID = 6682891691  # آیدی عددی ادمین را اینجا وارد کنید
TOKEN = '8037159516:AAFHApaPBLmubqrA-riWpTENYuOBweRsN_8'  # توکن ربات را اینجا وارد کنید

updater = Updater(TOKEN, use_context=True)
dp = updater.dispatcher
bot = updater.bot

# بررسی عضویت در کانال‌ها
def check_membership(update, context):
    user_id = update.message.from_user.id
    for channel in CHANNELS:
        status = context.bot.get_chat_member(channel, user_id).status
        if status not in ['member', 'administrator', 'creator']:
            update.message.reply_text('لطفاً ابتدا در کانال‌های زیر عضو شوید:\n' + '\n'.join(CHANNELS))
            return False
    return True

# شروع ربات
def start(update, context):
    if not check_membership(update, context):
        return ConversationHandler.END
    user_id = update.message.from_user.id
    today = datetime.now().strftime('%Y-%m-%d')
    c.execute("INSERT OR IGNORE INTO stats (date, visits) VALUES (?, 0)", (today,))
    c.execute("UPDATE stats SET visits = visits + 1 WHERE date = ?", (today,))
    conn.commit()
    
    keyboard = [[telegram.KeyboardButton("مشاهده محصولات")],
                [telegram.KeyboardButton("ویرایش اطلاعات شخصی")]]
    reply_markup = telegram.ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text('خوش آمدید! لطفاً گزینه مورد نظر را انتخاب کنید:', reply_markup=reply_markup)
    
    # بررسی اطلاعات کاربر
    c.execute("SELECT * FROM users WHERE id = ?", (user_id,))
    if not c.fetchone():
        update.message.reply_text('لطفاً اطلاعات خود را وارد کنید:\nنام خود را ارسال کنید')
        return GET_USER_INFO
    return ConversationHandler.END

# لیست محصولات
def list_products(update, context):
    if not check_membership(update, context):
        return
    c.execute("SELECT id, name FROM products")
    products = c.fetchall()
    if not products:
        update.message.reply_text("محصولی وجود ندارد!")
        return
    keyboard = [[telegram.KeyboardButton(f"{name}")] for id, name in products]
    reply_markup = telegram.ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text("محصولات موجود:", reply_markup=reply_markup)

# نمایش جزئیات محصول
def show_product(update, context):
    if not check_membership(update, context):
        return
    product_name = update.message.text
    c.execute("SELECT name, description, image FROM products WHERE name = ?", (product_name,))
    product = c.fetchone()
    if product:
        name, desc, image = product
        update.message.reply_text(f"نام: {name}\nتوضیحات: {desc}")
        if image:
            context.bot.send_photo(update.message.chat_id, image)
    else:
        update.message.reply_text("محصول یافت نشد!")

# اضافه کردن محصول (فقط ادمین)
def add_product(update, context):
    if update.message.from_user.id != ADMIN_ID:
        update.message.reply_text("شما اجازه این کار را ندارید!")
        return ConversationHandler.END
    update.message.reply_text("نام محصول را وارد کنید:")
    return ADD_PRODUCT

def add_product_name(update, context):
    context.user_data['product_name'] = update.message.text
    update.message.reply_text("توضیحات محصول را وارد کنید:")
    return ADD_PRODUCT + 1

def add_product_desc(update, context):
    context.user_data['product_desc'] = update.message.text
    update.message.reply_text("لطفاً تصویر محصول را ارسال کنید (یا /skip برای رد کردن):")
    return ADD_PRODUCT + 2

def add_product_image(update, context):
    if update.message.text == '/skip':
        image = None
    else:
        image = update.message.photo[-1].file_id
    c.execute("INSERT INTO products (name, description, image) VALUES (?, ?, ?)",
             (context.user_data['product_name'], context.user_data['product_desc'], image))
    conn.commit()
    update.message.reply_text("محصول با موفقیت اضافه شد!")
    return ConversationHandler.END

# دریافت اطلاعات کاربر
def get_user_info(update, context):
    user_id = update.message.from_user.id
    if 'first_name' not in context.user_data:
        context.user_data['first_name'] = update.message.text
        update.message.reply_text("نام خانوادگی را وارد کنید:")
        return GET_USER_INFO + 1
    elif 'last_name' not in context.user_data:
        context.user_data['last_name'] = update.message.text
        update.message.reply_text("شماره تلفن را وارد کنید:")
        return GET_USER_INFO + 2
    elif 'phone' not in context.user_data:
        context.user_data['phone'] = update.message.text
        update.message.reply_text("تاریخ تولد را به صورت YYYY-MM-DD وارد کنید:")
        return GET_USER_INFO + 3
    else:
        birth_date = update.message.text
        c.execute("INSERT INTO users (id, first_name, last_name, phone, birth_date) VALUES (?, ?, ?, ?, ?)",
                 (user_id, context.user_data['first_name'], context.user_data['last_name'],
                  context.user_data['phone'], birth_date))
        conn.commit()
        update.message.reply_text("اطلاعات شما با موفقیت ثبت شد!")
        return start(update, context)

# ویرایش اطلاعات کاربر
def edit_user_info(update, context):
    if not check_membership(update, context):
        return
    user_id = update.message.from_user.id
    c.execute("SELECT * FROM users WHERE id = ?", (user_id,))
    user = c.fetchone()
    if user:
        update.message.reply_text(f"اطلاعات فعلی:\nنام: {user[1]}\nنام خانوادگی: {user[2]}\nتلفن: {user[3]}\nتاریخ تولد: {user[4]}\nچه چیزی را می‌خواهید تغییر دهید؟ (نام/نام خانوادگی/تلفن/تاریخ تولد)")
        return EDIT_USER_INFO
    return ConversationHandler.END

def process_edit(update, context):
    field = update.message.text
    context.user_data['edit_field'] = field
    update.message.reply_text(f"مقدار جدید برای {field} را وارد کنید:")
    return EDIT_USER_INFO + 1

def save_edit(update, context):
    user_id = update.message.from_user.id
    new_value = update.message.text
    field = context.user_data['edit_field']
    field_map = {'نام': 'first_name', 'نام خانوادگی': 'last_name', 'تلفن': 'phone', 'تاریخ تولد': 'birth_date'}
    c.execute("SELECT * FROM users WHERE id = ?", (user_id,))
    old_data = c.fetchone()
    c.execute(f"UPDATE users SET {field_map[field]} = ? WHERE id = ?", (new_value, user_id))
    conn.commit()
    c.execute("SELECT * FROM users WHERE id = ?", (user_id,))
    new_data = c.fetchone()
    context.bot.send_message(ADMIN_ID, f"تغییر اطلاعات کاربر:\nقدیمی: {old_data[1:5]}\nجدید: {new_data[1:5]}")
    update.message.reply_text("اطلاعات با موفقیت به‌روزرسانی شد!")
    return start(update, context)

# نمایش آمار (فقط ادمین)
def show_stats(update, context):
    if update.message.from_user.id != ADMIN_ID:
        return
    c.execute("SELECT * FROM stats")
    stats = c.fetchall()
    message = "آمار ورود:\n" + "\n".join([f"{date}: {visits} بازدید" for date, visits in stats])
    c.execute("SELECT name FROM products")
    products = c.fetchall()
    message += "\n\nمحصولات:\n" + "\n".join([f"{p[0]}" for p in products])
    c.execute("SELECT * FROM users")
    users = c.fetchall()
    message += "\n\nکاربران:\n" + "\n".join([f"{u[1]} {u[2]} - {u[3]} - {u[4]}" for u in users])
    update.message.reply_text(message)

# بررسی تولدها و ارسال تبریک
def check_birthdays():
    today = datetime.now().strftime('%m-%d')
    c.execute("SELECT id, first_name, birth_date FROM users WHERE strftime('%m-%d', birth_date) = ?", (today,))
    for user_id, first_name, _ in c.fetchall():
        bot.send_message(user_id, f"تولدت مبارک {first_name}! 🎉 امیدوارم روز فوق‌العاده‌ای داشته باشی!")

# گزارش روزانه به ادمین
def daily_report():
    today = datetime.now().strftime('%Y-%m-%d')
    c.execute("SELECT visits FROM stats WHERE date = ?", (today,))
    visits = c.fetchone()[0] if c.fetchone() else 0
    c.execute("SELECT * FROM users")
    users = c.fetchall()
    message = f"گزارش روزانه {today}:\nبازدید: {visits}\nکاربران:\n" + "\n".join([f"{u[1]} {u[2]} - {u[3]} - {u[4]}" for u in users])
    bot.send_message(ADMIN_ID, message)

# زمان‌بندی وظایف
def schedule_tasks():
    schedule.every().day.at("00:00").do(check_birthdays)
    schedule.every().day.at("23:59").do(daily_report)
    while True:
        schedule.run_pending()
        time.sleep(60)

# هندلرها
dp.add_handler(CommandHandler("start", start))
dp.add_handler(CommandHandler("stats", show_stats))
dp.add_handler(ConversationHandler(
    entry_points=[CommandHandler("addproduct", add_product)],
    states={
        ADD_PRODUCT: [MessageHandler(Filters.text & ~Filters.command, add_product_name)],
        ADD_PRODUCT + 1: [MessageHandler(Filters.text & ~Filters.command, add_product_desc)],
        ADD_PRODUCT + 2: [MessageHandler(Filters.photo | Filters.text, add_product_image)]
    },
    fallbacks=[]
))
dp.add_handler(ConversationHandler(
    entry_points=[MessageHandler(Filters.regex("مشاهده محصولات"), list_products),
                  MessageHandler(Filters.regex("ویرایش اطلاعات شخصی"), edit_user_info)],
    states={
        GET_USER_INFO: [MessageHandler(Filters.text & ~Filters.command, get_user_info)],
        GET_USER_INFO + 1: [MessageHandler(Filters.text & ~Filters.command, get_user_info)],
        GET_USER_INFO + 2: [MessageHandler(Filters.text & ~Filters.command, get_user_info)],
        GET_USER_INFO + 3: [MessageHandler(Filters.text & ~Filters.command, get_user_info)],
        EDIT_USER_INFO: [MessageHandler(Filters.text & ~Filters.command, process_edit)],
        EDIT_USER_INFO + 1: [MessageHandler(Filters.text & ~Filters.command, save_edit)]
    },
    fallbacks=[]
))
dp.add_handler(MessageHandler(Filters.text & ~Filters.command, show_product))

# شروع ربات و زمان‌بندی
if name == 'main':
    threading.Thread(target=schedule_tasks, daemon=True).start()
    updater.start_polling()
    updater.idle()
